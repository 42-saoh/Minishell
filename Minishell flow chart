<mxfile host="app.diagrams.net" modified="2021-08-03T05:12:22.999Z" agent="5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.107 Safari/537.36" etag="rE5RqaDpF7-s15RGlIFE" version="14.9.3" type="github">
  <diagram name="Page-1" id="5d7acffa-a066-3a61-03fe-96351882024d">
    <mxGraphModel dx="896" dy="722" grid="1" gridSize="10" guides="1" tooltips="1" connect="1" arrows="1" fold="1" page="1" pageScale="1" pageWidth="1100" pageHeight="850" background="#ffffff" math="0" shadow="0">
      <root>
        <mxCell id="0" />
        <mxCell id="1" parent="0" />
        <mxCell id="P0Z35y0YBq6WomVSRMDH-9" value="readline() 함수로 입력받은 문자열을 &#39;|&#39; 를 기준으로 쪼개 list에 넣는 함수" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1.011;exitY=0.739;exitDx=0;exitDy=0;exitPerimeter=0;entryX=0.5;entryY=0;entryDx=0;entryDy=0;" edge="1" parent="1" source="P0Z35y0YBq6WomVSRMDH-2" target="P0Z35y0YBq6WomVSRMDH-7">
          <mxGeometry x="0.6193" y="10" relative="1" as="geometry">
            <mxPoint x="480" y="370" as="sourcePoint" />
            <mxPoint x="720" y="640" as="targetPoint" />
            <Array as="points">
              <mxPoint x="475" y="369" />
              <mxPoint x="475" y="640" />
              <mxPoint x="720" y="640" />
              <mxPoint x="720" y="660" />
            </Array>
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="21ea969265ad0168-6" value="main" style="swimlane;html=1;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=26;fillColor=#e0e0e0;horizontalStack=0;resizeParent=1;resizeLast=0;collapsible=1;marginBottom=0;swimlaneFillColor=#ffffff;align=center;rounded=1;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;fontFamily=Verdana;fontSize=12" parent="1" vertex="1">
          <mxGeometry x="160" y="74" width="280" height="390" as="geometry" />
        </mxCell>
        <mxCell id="P0Z35y0YBq6WomVSRMDH-2" value="&lt;div&gt;&lt;div&gt;char&lt;span&gt;	&lt;/span&gt;*input;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;char&lt;span&gt;	&lt;/span&gt;*prompt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;t_info&lt;span&gt;	&lt;/span&gt;info;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;prompt = &quot;$&quot;;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;ft_memset(&amp;amp;info, 0, sizeof(t_info));&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;info.paths = init_path(envp);&lt;/div&gt;&lt;div&gt;&lt;span&gt;if (!info.paths)&lt;/span&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;return (error_occur_std(SPLIT_ERR));&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;info.envp = envp;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;while(1)&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;{&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;input = readline(prompt);&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;if (ft_strcmp(input, &quot;&quot;) != 0)&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;{&lt;/div&gt;&lt;div&gt;&lt;span&gt;			&lt;/span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;add_history(input);&lt;/div&gt;&lt;div&gt;&lt;span&gt;			&lt;/span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;if (!make_command_list(&amp;amp;info, input))&lt;/div&gt;&lt;div&gt;&lt;span&gt;				&lt;/span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;break ;&lt;/div&gt;&lt;div&gt;&lt;span&gt;			&lt;/span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;&lt;/span&gt;start(&amp;amp;info);&lt;/div&gt;&lt;div&gt;&lt;span&gt;			&lt;/span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;&lt;/span&gt;ft_lstclear(&amp;amp;info.commands, ft_free);&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;}&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;ft_free(input);&lt;/div&gt;&lt;div&gt;}&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacingLeft=4;spacingRight=4;whiteSpace=wrap;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" vertex="1" parent="21ea969265ad0168-6">
          <mxGeometry y="26" width="280" height="364" as="geometry" />
        </mxCell>
        <mxCell id="21ea969265ad0168-10" value="char **init_path(char *envp[])" style="swimlane;html=1;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=26;fillColor=#e0e0e0;horizontalStack=0;resizeParent=1;resizeLast=0;collapsible=1;marginBottom=0;swimlaneFillColor=#ffffff;align=center;rounded=1;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;fontFamily=Verdana;fontSize=12" parent="1" vertex="1">
          <mxGeometry x="560" y="230" width="270" height="366" as="geometry" />
        </mxCell>
        <mxCell id="P0Z35y0YBq6WomVSRMDH-6" value="&lt;div&gt;char&lt;span&gt;	&lt;/span&gt;*path;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;char&lt;span&gt;	&lt;/span&gt;**paths;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;path = 0;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;while (*envp)&lt;/div&gt;&lt;div&gt;{&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;path = *envp;&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;if (ft_strlen(path) &amp;lt; 4)&lt;/div&gt;&lt;div&gt;&lt;span&gt;			&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;continue ;&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;if (path[0] == &#39;P&#39; &amp;amp;&amp;amp; path[1] == &#39;A&#39; &amp;amp;&amp;amp; \&lt;/div&gt;&lt;div&gt;&lt;span&gt;				&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;path[2] == &#39;T&#39; &amp;amp;&amp;amp; path[3] == &#39;H&#39;)&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;{&lt;/div&gt;&lt;div&gt;&lt;span&gt;			&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;path = *envp;&lt;/div&gt;&lt;div&gt;&lt;span&gt;			&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;break ;&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;}&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;envp++;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;}&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;if (!path)&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;path = PATH;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;paths = ft_split(path + 5, &#39;:&#39;);&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;if (!paths)&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;error_occur_std(SPLIT_ERR);&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;return (paths);&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacingLeft=4;spacingRight=4;whiteSpace=wrap;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" vertex="1" parent="21ea969265ad0168-10">
          <mxGeometry y="26" width="270" height="340" as="geometry" />
        </mxCell>
        <mxCell id="P0Z35y0YBq6WomVSRMDH-4" value="path 설정하는 함수 (envp에서 $PATH 를 찾아 &#39;=&#39; 뒤의 문자열을 &#39;:&#39; 를 기준으로 스플릿해 쪼개는 함수)&amp;nbsp;" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;" edge="1" parent="1" source="P0Z35y0YBq6WomVSRMDH-2" target="21ea969265ad0168-10">
          <mxGeometry x="0.6842" y="10" relative="1" as="geometry">
            <Array as="points">
              <mxPoint x="695" y="200" />
            </Array>
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="P0Z35y0YBq6WomVSRMDH-7" value="int make_command_list(t_info *info, char *input)" style="swimlane;html=1;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=26;fillColor=#e0e0e0;horizontalStack=0;resizeParent=1;resizeLast=0;collapsible=1;marginBottom=0;swimlaneFillColor=#ffffff;align=center;rounded=1;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;fontFamily=Verdana;fontSize=12;arcSize=19;" vertex="1" parent="1">
          <mxGeometry x="560" y="670" width="320" height="350" as="geometry" />
        </mxCell>
        <mxCell id="P0Z35y0YBq6WomVSRMDH-8" value="&lt;div&gt;int&lt;span&gt;	&lt;/span&gt;s;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;int&lt;span&gt;	&lt;/span&gt;e;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;s = 0;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;e = 0;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;info-&amp;gt;command_cnt = 0;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;info-&amp;gt;is_builtin = -1;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;while (input[e])&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;{&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;if (is_quotation(input[e]))&lt;/div&gt;&lt;div&gt;&lt;span&gt;			&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;&lt;/span&gt;move_end_point(input, &amp;amp;e, input[e]);&lt;/div&gt;&lt;div&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;else if (input[e] == &#39;|&#39;)&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;{&lt;/div&gt;&lt;div&gt;&lt;span&gt;			&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;&lt;/span&gt;if (!append_command(info, input, s, e))&lt;/div&gt;&lt;div&gt;&lt;span&gt;				&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;return (0);&lt;/div&gt;&lt;div&gt;&lt;span&gt;			&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;s = e + 1;&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;}&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;e++;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;}&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;if (!append_command(info, input, s, e))&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;return (0);&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;return (1);&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacingLeft=4;spacingRight=4;whiteSpace=wrap;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" vertex="1" parent="P0Z35y0YBq6WomVSRMDH-7">
          <mxGeometry y="26" width="320" height="324" as="geometry" />
        </mxCell>
        <mxCell id="P0Z35y0YBq6WomVSRMDH-13" value="&amp;nbsp;&#39; \&#39; &#39; ,&amp;nbsp; &#39; \&quot; &#39; 인지 확인하는 함수&amp;nbsp;" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;entryX=-0.006;entryY=0.362;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="1" target="P0Z35y0YBq6WomVSRMDH-15">
          <mxGeometry x="0.7519" y="9" relative="1" as="geometry">
            <mxPoint x="1040" y="700" as="targetPoint" />
            <mxPoint x="880" y="830" as="sourcePoint" />
            <Array as="points">
              <mxPoint x="960" y="830" />
              <mxPoint x="960" y="439" />
            </Array>
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="P0Z35y0YBq6WomVSRMDH-14" value="int is_quotation(char c)" style="swimlane;html=1;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=26;fillColor=#e0e0e0;horizontalStack=0;resizeParent=1;resizeLast=0;collapsible=1;marginBottom=0;swimlaneFillColor=#ffffff;align=center;rounded=1;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;fontFamily=Verdana;fontSize=12;arcSize=19;" vertex="1" parent="1">
          <mxGeometry x="1040" y="390" width="320" height="90" as="geometry" />
        </mxCell>
        <mxCell id="P0Z35y0YBq6WomVSRMDH-15" value="&lt;div&gt;if (c == SINGLE_Q || c == DOUBLE_Q)&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;return (1);&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;return (0);&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacingLeft=4;spacingRight=4;whiteSpace=wrap;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" vertex="1" parent="P0Z35y0YBq6WomVSRMDH-14">
          <mxGeometry y="26" width="320" height="64" as="geometry" />
        </mxCell>
        <mxCell id="P0Z35y0YBq6WomVSRMDH-16" value="line에서 end_c가 나온 문자 다음부터 end_c 문자가 나올때까지 반복해서 index를 증가시키는 함수" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;entryX=-0.002;entryY=0.429;entryDx=0;entryDy=0;entryPerimeter=0;" edge="1" parent="1" source="P0Z35y0YBq6WomVSRMDH-8" target="P0Z35y0YBq6WomVSRMDH-18">
          <mxGeometry x="1" y="-176" relative="1" as="geometry">
            <mxPoint x="1000" y="520" as="targetPoint" />
            <Array as="points">
              <mxPoint x="880" y="850" />
              <mxPoint x="1000" y="850" />
              <mxPoint x="1000" y="599" />
            </Array>
            <mxPoint x="151" y="-85" as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="P0Z35y0YBq6WomVSRMDH-17" value="void move_end_point(char *line, int *e, char end_c)" style="swimlane;html=1;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=26;fillColor=#e0e0e0;horizontalStack=0;resizeParent=1;resizeLast=0;collapsible=1;marginBottom=0;swimlaneFillColor=#ffffff;align=center;rounded=1;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;fontFamily=Verdana;fontSize=12;arcSize=19;" vertex="1" parent="1">
          <mxGeometry x="1040" y="520" width="340" height="150" as="geometry" />
        </mxCell>
        <mxCell id="P0Z35y0YBq6WomVSRMDH-18" value="&lt;div&gt;int idx;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;idx = *e + 1;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;while (line[idx] &amp;amp;&amp;amp; line[idx] != end_c)&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;idx++;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;if (line[idx] == end_c)&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;idx++;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;*e = idx;&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacingLeft=4;spacingRight=4;whiteSpace=wrap;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" vertex="1" parent="P0Z35y0YBq6WomVSRMDH-17">
          <mxGeometry y="26" width="340" height="124" as="geometry" />
        </mxCell>
        <mxCell id="P0Z35y0YBq6WomVSRMDH-19" value="인덱스 s 에서 e 까지의 &lt;br&gt;문자열을 추출하여&lt;br&gt;&amp;nbsp;list 에 넣는 함수" style="edgeStyle=orthogonalEdgeStyle;rounded=0;orthogonalLoop=1;jettySize=auto;html=1;exitX=1;exitY=0.5;exitDx=0;exitDy=0;" edge="1" parent="1" source="P0Z35y0YBq6WomVSRMDH-8">
          <mxGeometry x="0.1667" y="-30" relative="1" as="geometry">
            <mxPoint x="1040" y="890" as="targetPoint" />
            <Array as="points">
              <mxPoint x="880" y="890" />
            </Array>
            <mxPoint as="offset" />
          </mxGeometry>
        </mxCell>
        <mxCell id="P0Z35y0YBq6WomVSRMDH-20" value="int append_command(t_info *info, char *input, int s, int e" style="swimlane;html=1;fontStyle=0;childLayout=stackLayout;horizontal=1;startSize=26;fillColor=#e0e0e0;horizontalStack=0;resizeParent=1;resizeLast=0;collapsible=1;marginBottom=0;swimlaneFillColor=#ffffff;align=center;rounded=1;shadow=0;comic=0;labelBackgroundColor=none;strokeWidth=1;fontFamily=Verdana;fontSize=12;arcSize=19;" vertex="1" parent="1">
          <mxGeometry x="1040" y="740" width="400" height="360" as="geometry" />
        </mxCell>
        <mxCell id="P0Z35y0YBq6WomVSRMDH-21" value="&lt;div&gt;&lt;span&gt;	&lt;/span&gt;char&lt;span&gt;	&lt;/span&gt;*temp;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;t_list&lt;span&gt;	&lt;/span&gt;*data;&lt;/div&gt;&lt;div&gt;&lt;br&gt;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;temp = ft_substr(input + s, 0, e - s);&lt;/div&gt;&lt;div&gt;if (!temp)&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;return (error_occur_std(MALLOC_ERR));&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;if (is_empty(temp))&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;{&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;free(temp);&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;return (1);&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;}&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;data = ft_lstnew(temp);&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;if (!data)&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;{&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;free(temp);&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;return (error_occur_std(MALLOC_ERR));&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;}&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;if (info-&amp;gt;command_cnt == 0)&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;info-&amp;gt;commands = data;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;else&lt;/div&gt;&lt;div&gt;&lt;span&gt;		&lt;/span&gt;&lt;span style=&quot;white-space: pre&quot;&gt;	&lt;/span&gt;ft_lstadd_back(&amp;amp;info-&amp;gt;commands, data);&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;info-&amp;gt;command_cnt++;&lt;/div&gt;&lt;div&gt;&lt;span&gt;	&lt;/span&gt;return (1);&lt;/div&gt;" style="text;html=1;strokeColor=none;fillColor=none;spacingLeft=4;spacingRight=4;whiteSpace=wrap;overflow=hidden;rotatable=0;points=[[0,0.5],[1,0.5]];portConstraint=eastwest;" vertex="1" parent="P0Z35y0YBq6WomVSRMDH-20">
          <mxGeometry y="26" width="400" height="334" as="geometry" />
        </mxCell>
      </root>
    </mxGraphModel>
  </diagram>
</mxfile>
